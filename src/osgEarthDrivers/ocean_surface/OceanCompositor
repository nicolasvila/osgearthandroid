/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2012 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_OCEAN_SURFACE_COMPOSITOR
#define OSGEARTH_DRIVER_OCEAN_SURFACE_COMPOSITOR 1

#include <osgEarth/TextureCompositor>
#include "OceanSurface"

namespace osgEarth_ocean_surface
{
    using namespace osgEarth;

    /**
     * A custom texture compositor for rendering the ocean surface.
     */
    class OceanCompositor : public TextureCompositorTechnique
    {
    public:
        OceanCompositor(const osgEarth::Drivers::OceanSurfaceOptions& options);

        /** dtor */
        virtual ~OceanCompositor() { }

        virtual bool requiresUnitTextureSpace() const { return true; }

        virtual bool usesShaderComposition() const { return true; }

        virtual void updateMasterStateSet( osg::StateSet* stateSet, const TextureLayout& layout ) const;

        virtual void applyLayerUpdate(osg::StateSet*       stateSet,
                                      UID                  layerUID,
                                      const GeoImage&      preparedImage,
                                      const TileKey&       tileKey,
                                      const TextureLayout& layout,
                                      osg::StateSet*       parentStateSet) const;

    private:

        osgEarth::Drivers::OceanSurfaceOptions _options;
    };

} // namespace osgEarth_ocean_surface

#endif // OSGEARTH_DRIVER_OCEAN_SURFACE_COMPOSITOR
