/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2011 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_SHADER_GENERATOR_H
#define OSGEARTH_SHADER_GENERATOR_H 1

#include <osgEarth/Common>
#include <osgEarth/StateSetCache>
#include <osgEarth/VirtualProgram>
#include <osg/NodeVisitor>
#include <osg/State>

namespace osgEarth
{
    /**
     * Utility class that will traverse a scene graph and generate a
     * set of VirtualProgram attributes to render it as best it can using
     * shaders.
     */
    class OSGEARTH_EXPORT ShaderGenerator : public osg::NodeVisitor
    {
    public:
        /**
         * Constructs a new shader generator
         */
        ShaderGenerator();

        /**
         * Constructs a new shader generator that will use an external
         * state set cache to optimize state changes.
         */
        ShaderGenerator( StateSetCache* cache );

        /** dtor. */
        virtual ~ShaderGenerator() { }


    public: // osg::NodeVisitor

        void apply( osg::Node& );

        void apply( osg::Geode& );

    protected:

        void apply( osg::Drawable* );

        bool processGeometry( osg::StateSet* stateSet, osg::ref_ptr<osg::StateSet>& replacement );

        bool processText( osg::StateSet* stateSet, osg::ref_ptr<osg::StateSet>& replacement );

        osg::ref_ptr<osg::State> _state;

        osg::ref_ptr<StateSetCache> _stateSetCache;

        osg::ref_ptr<VirtualProgram> _defaultVP;
    };

} // namespace osgEarth

#endif // OSGEARTH_DRAPEABLE_NODE_H
